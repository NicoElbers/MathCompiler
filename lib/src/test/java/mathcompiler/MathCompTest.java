/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mathcompiler;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class MathCompTest {
    @Test
    void correctPeeker() {
        String input = "Hello world 1234567890; WhAtIsThIs\0";
        for (int i = 0; i < input.length(); i++) {
            assertEquals(input.charAt(i), CharReaderBackup.peek(i, input));
        }
    }

    @Test
    void correctPeekerEOF() {
        String input = "";
        assertEquals('\0', CharReaderBackup.peek(input));
        assertEquals('\0', CharReaderBackup.peek(10, input));
        input = "\0";
        assertEquals('\0', CharReaderBackup.peek(10, input));
        input = "test";
        assertEquals('\0', CharReaderBackup.peek(10, input));
    }

    @Test
    void correctConsume() {
        String input = "Hello";
        String output = input;

        for (int i = 0; i <= input.length(); i++) {
            output = input.substring(i, input.length());
            assertEquals(output, CharReaderBackup.consume(i, input));
        }
    }

    @Test
    void correctEOF() {
        assertEquals(true, CharReaderBackup.isEOF(""));
        assertEquals(true, CharReaderBackup.isEOF("\0"));
        assertEquals(false, CharReaderBackup.isEOF("Test"));
        assertEquals(false, CharReaderBackup.isEOF("Test\0"));
        assertEquals(false, CharReaderBackup.isEOF(" \0"));
    }

    @Test
    void correctTokens() {
        // input "2"
        Token token1 = new Token(TokenType.INT, "2");
        assertEquals(TokenType.INT, token1.getType());
        assertEquals("2", token1.getLiteral());
        // input "+"
        Token token2 = new Token(TokenType.PLUS, "+");
        assertEquals(TokenType.PLUS, token2.getType());
        assertEquals("+", token2.getLiteral());
        // input "*"
        Token token3 = new Token(TokenType.MULTIPLY, "*");
        assertEquals(TokenType.MULTIPLY, token3.getType());
        assertEquals("*", token3.getLiteral());
        // input "/"
        Token token4 = new Token(TokenType.DEVIDE, "/");
        assertEquals(TokenType.DEVIDE, token4.getType());
        assertEquals("/", token4.getLiteral());
    }

    @Test
    void testTokenizerKeywords() {
        String input = "+-*/";
        TokenizerBackup tokenizer = new TokenizerBackup(input);

        assertEquals(TokenType.PLUS, tokenizer.nextToken().getType());
        assertEquals(TokenType.MINUS, tokenizer.nextToken().getType());
        assertEquals(TokenType.MULTIPLY, tokenizer.nextToken().getType());
        assertEquals(TokenType.DEVIDE, tokenizer.nextToken().getType());
        assertEquals(TokenType.EOF, tokenizer.nextToken().getType());
    }

    @Test
    void testTokenizerWithEOF() {
        String input = "+-*/\0";
        TokenizerBackup tokenizer = new TokenizerBackup(input);

        assertEquals(TokenType.PLUS, tokenizer.nextToken().getType());
        assertEquals(TokenType.MINUS, tokenizer.nextToken().getType());
        assertEquals(TokenType.MULTIPLY, tokenizer.nextToken().getType());
        assertEquals(TokenType.DEVIDE, tokenizer.nextToken().getType());
        assertEquals(TokenType.EOF, tokenizer.nextToken().getType());
    }

    @Test
    void testIllegalTokenizer() {
        String input = "@"; // If I ever end up using '@' as a legal character past me can legally cause
                            // future me headaches
        TokenizerBackup tokenizer = new TokenizerBackup(input);

        assertEquals(TokenType.ILLEGAL, tokenizer.nextToken().getType());
    }

    /* new tests start here */

    @Test
    void testingTokenizer() {
        String input = "+-*/";
        Tokenizer tokenizer = new Tokenizer(input);
        Token currentToken;

        currentToken = tokenizer.nextToken();
        assertEquals(TokenType.PLUS, currentToken.getType());
        assertEquals("+", currentToken.getLiteral());

        currentToken = tokenizer.nextToken();
        assertEquals(TokenType.MINUS, currentToken.getType());
        assertEquals("-", currentToken.getLiteral());

        currentToken = tokenizer.nextToken();
        assertEquals(TokenType.MULTIPLY, currentToken.getType());
        assertEquals("*", currentToken.getLiteral());

        currentToken = tokenizer.nextToken();
        assertEquals(TokenType.DEVIDE, currentToken.getType());
        assertEquals("/", currentToken.getLiteral());

        currentToken = tokenizer.nextToken();
        assertEquals(TokenType.EOF, currentToken.getType());
        assertEquals("\0", currentToken.getLiteral());

    }
}
